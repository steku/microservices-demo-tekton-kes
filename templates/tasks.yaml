---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: {{ include "ms-demo-tekton.fullname" . }}-kaniko
spec:
  params:
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: CONTEXT
      description: The build context used by Kaniko.
      default: ./
    - name: EXTRA_ARGS
      default: ""
    - name: BUILDER_IMAGE
      description: The image on which builds will run
      default: gcr.io/kaniko-project/executor:v0.13.0
    - name: CACHE
      description: Use cache when building a new image, some containers fail if cache is used
  resources:
    inputs:
    - name: source
      type: git
    outputs:
    - name: image
      type: image

  steps:
  - name: build-and-push
    workingDir: /workspace/source
    image: $(inputs.params.BUILDER_IMAGE)
    # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
    # https://github.com/tektoncd/pipeline/pull/706
    env:
    - name: DOCKER_CONFIG
      value: /tekton/home/.docker
    command:
    - /kaniko/executor
    - $(inputs.params.EXTRA_ARGS)
    - --dockerfile=$(inputs.params.DOCKERFILE)
    - --context=/workspace/source/$(inputs.params.CONTEXT)  # The user does not need to care the workspace and the source.
    - --destination=$(outputs.resources.image.url)
    - --cache=$(params.CACHE)
    securityContext:
      runAsUser: 0
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: {{ include "ms-demo-tekton.fullname" . }}-create-webhook
spec:
  volumes:
  - name: github-secret
    secret:
      secretName: $(inputs.params.GitHubSecretName)
  params:
    - name: ExternalDomain
      description: "The external domain for the EventListener e.g. `$(inputs.params.EventListenerName).<PROXYIP>.nip.io`"
    - name: GitHubUser
      description: "The GitHub user"
    - name: GitHubRepo
      description: "The GitHub repo where the webhook will be created"
    - name: GitHubOrg
      description: "The GitHub organization where the webhook will be created"
    - name: GitHubSecretName
      description: "The Secret name for GitHub access token. This is always mounted and must exist"
    - name: GitHubAccessTokenKey
      description: "The GitHub access token key name"
    - name: GitHubSecretStringKey
      description: "The GitHub secret string key name"
    - name: GitHubDomain
      description: "The GitHub domain. Override for GitHub Enterprise"
      default: "github.com"
    - name: WebhookEvents
      description: "List of events the webhook will send notifications for"
      default: '[\"push\",\"pull_request\"]'
  steps:
  - name: create-webhook
    image: pstauffer/curl:latest
    volumeMounts:
    - name: github-secret
      mountPath: /var/secret
    command:
    - sh
    args:
    - -ce
    - |
      set -e
      echo "Create Webhook"
      if [ $(inputs.params.GitHubDomain) = "github.com" ];then
        curl -v -d "{\"name\": \"web\",\"active\": true,\"events\": $(inputs.params.WebhookEvents),\"config\": {\"url\": \"https://$(inputs.params.ExternalDomain)\",\"content_type\": \"json\",\"insecure_ssl\": \"0\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X POST -u $(inputs.params.GitHubUser):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://api.github.com/repos/$(inputs.params.GitHubOrg)/$(inputs.params.GitHubRepo)/hooks
      else
        curl -d "{\"name\": \"web\",\"active\": true,\"events\": $(inputs.params.WebhookEvents),\"config\": {\"url\": \"https://$(inputs.params.ExternalDomain)/\",\"content_type\": \"json\",\"insecure_ssl\": \"0\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X POST -u $(inputs.params.GitHubUser):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://$(inputs.params.GitHubDomain)/api/v3/repos/$(inputs.params.GitHubOrg)/$(inputs.params.GitHubRepo)/hooks
      fi
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: {{ include "ms-demo-tekton.fullname" . }}-update-commit-id
spec:
  volumes:
  - name: argocd-secret
    secret:
      secretName: $(inputs.params.ArgoCdSecret)

  params:
    - name: ArgoURL
      description: "The URL of the ArgoCD server"
    - name: ArgoCdSecret
      description: "The secret containing the username and password for the tekton task to connect to argo"
    - name: CommitID
      description: "The commit ID to update"
    - name: AppName
      description: "The name of the argo app to update"
  steps:
  - name: update-commit-id
    image: argoproj/argocd
    volumeMounts:
    - name: argocd-secret
      mountPath: /var/secret
    command:
    - sh
    args:
    - -ce
    - |
      set -e
      echo "update commit id"
      argocd login $(params.ArgoURL) --username $(/bin/cat /var/secret/username) --password $(/bin/cat /var/secret/password)
      argocd app set $(params.AppName) -p image.tag=$(params.CommitID)
